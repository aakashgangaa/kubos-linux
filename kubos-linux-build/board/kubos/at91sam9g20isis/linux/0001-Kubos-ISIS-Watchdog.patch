diff -uNr -x '*.dts' -x '*.mod*' -x '*.S' -x '*.o*' -x '.config*' -x 'auto*' -x defconfig -x '.*' -x '*.ko*' -x '*/arm/boot/*' -x '*builtin*' -x '*.conf' -x '*generated*' -x '*.s*' -x '*.gz*' -x '*.map*' -x '*vmlinux*' -x '*.lzma' -x Image -x zImage -x '*.a*' -x mconf -x config_data.h linux-4.4.23/drivers/watchdog/at91isis_wdt.c modified-linux-4.4.23/drivers/watchdog/at91isis_wdt.c
--- linux-4.4.23/drivers/watchdog/at91isis_wdt.c	1969-12-31 18:00:00.000000000 -0600
+++ modified-linux-4.4.23/drivers/watchdog/at91isis_wdt.c	2016-12-02 16:41:11.706212000 -0600
@@ -0,0 +1,409 @@
+/*
+ * Watchdog driver for ISIS AT91SAM9G20-based iOBC.
+ *
+ * Copyright (C) 2008 Renaud CERRATO r.cerrato@til-technologies.fr
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ *
+ * Modified for Kubos Linux:
+ *   This file was originally based on at91sam9_wdt.c and
+ *   has been modified for the at91sam9g20isis board.
+ *   Changes -
+ *     Watchdog reset logic changed for iOBC
+ *     Timer units changed from seconds to ticks
+ *     Un-needed device tree options removed
+ * Author: Catherine Freed <catherine@kubos.co>
+ */
+
+/*
+ * The hardware watchdog in the ISIS OBC is controlled by an external supervisor
+ * chip.  The supervisor expects the watchdog line to be bounced every tenth of a
+ * second, with an absolute maximum interval of once every second.  This allows
+ * several 1/10th sec check-ins to be missed without triggering a full reboot.
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/clk.h>
+#include <linux/errno.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/platform_device.h>
+#include <linux/reboot.h>
+#include <linux/types.h>
+#include <linux/watchdog.h>
+#include <linux/jiffies.h>
+#include <linux/timer.h>
+#include <linux/bitops.h>
+#include <linux/uaccess.h>
+#include <linux/of.h>
+#include <linux/of_irq.h>
+#include <linux/gpio.h>
+
+#include "at91sam9_wdt.h"
+
+#define DRV_NAME "at91isis Watchdog"
+
+#define WDT_MR_RESET	0x3FFF2FFF
+
+/* Watchdog max counter value in ticks */
+#define WDT_COUNTER_MAX_TICKS	0xFFF
+
+/* HZ = # of ticks per second */
+/* Min counter = 1/10th sec */
+#define WDT_COUNTER_MIN_TICKS   HZ / 10
+
+/* Hardware timeout in seconds */
+#define WDT_HW_TIMEOUT 1
+
+/* User land timeout */
+#define WDT_HEARTBEAT 1
+static int heartbeat;
+module_param(heartbeat, int, 0);
+MODULE_PARM_DESC(heartbeat, "Watchdog heartbeats in seconds. "
+	"(default = " __MODULE_STRING(WDT_HEARTBEAT) ")");
+
+static bool nowayout = WATCHDOG_NOWAYOUT;
+module_param(nowayout, bool, 0);
+MODULE_PARM_DESC(nowayout, "Watchdog cannot be stopped once started "
+	"(default=" __MODULE_STRING(WATCHDOG_NOWAYOUT) ")");
+
+#define to_wdt(wdd) container_of(wdd, struct at91isiswdt, wdd)
+struct at91isiswdt {
+	struct watchdog_device wdd;
+	void __iomem *base;
+	unsigned long next_heartbeat;	/* the next_heartbeat for the timer */
+	struct timer_list timer;	/* The timer that pings the watchdog */
+	u32 mr;
+	u32 mr_mask;
+	unsigned long heartbeat;	/* WDT heartbeat in jiffies */
+	bool nowayout;
+	unsigned int irq;
+	struct clk *sclk;
+};
+
+/*
+ * Kick the watchdog:
+ *   Set pin PA30 high and then low to tell the supervisor we're
+ *   still alive.
+ */
+static inline void at91_isis_wdt_reset(struct at91isiswdt *wdt)
+{
+	int i;
+
+	for(i = 0; i < 10; i++)
+	{
+		gpio_set_value(30, 1);
+		gpio_set_value(30, 0);
+	}
+
+}
+
+/*
+ * Kick the watchdog and reset the timer
+ */
+static void at91_isis_ping(unsigned long data)
+{
+	struct at91isiswdt *wdt = (struct at91isiswdt *)data;
+
+	if (time_before(jiffies, wdt->next_heartbeat) ||
+	    !watchdog_active(&wdt->wdd))
+	{
+		at91_isis_wdt_reset(wdt);
+		mod_timer(&wdt->timer, jiffies + wdt->heartbeat);
+	}
+	else
+	{
+		pr_crit("I will reset your machine !\n");
+	}
+}
+
+static int at91_isis_wdt_start(struct watchdog_device *wdd)
+{
+	struct at91isiswdt *wdt = to_wdt(wdd);
+	/* calculate when the next userspace timeout will be */
+	wdt->next_heartbeat = jiffies + wdd->timeout * HZ;
+	return 0;
+}
+
+static int at91_isis_wdt_stop(struct watchdog_device *wdd)
+{
+	/* The watchdog timer hardware can not be stopped... */
+	return 0;
+}
+
+static int at91_isis_wdt_set_timeout(struct watchdog_device *wdd, unsigned int new_timeout)
+{
+	wdd->timeout = new_timeout;
+	return at91_isis_wdt_start(wdd);
+}
+
+static int at91_isis_wdt_init(struct platform_device *pdev, struct at91isiswdt *wdt)
+{
+	u32 tmp;
+	u32 delta;
+	u32 value;
+	int err;
+	u32 mask = wdt->mr_mask;
+	unsigned long min_heartbeat = 1;
+	unsigned long max_heartbeat;
+	struct device *dev = &pdev->dev;
+
+	tmp = wdt->mr;
+
+	value = tmp & AT91_WDT_WDV;
+	delta = (tmp & AT91_WDT_WDD) >> 16;
+
+	if (delta < value)
+		min_heartbeat = value - delta;
+
+	max_heartbeat = value;
+	if (!max_heartbeat) {
+		dev_err(dev,
+			"max heartbeat is too small for the system to handle it correctly\n");
+		return -EINVAL;
+	}
+
+	/*
+	 * Try to reset the watchdog counter 4 or 2 times more often than
+	 * actually requested, to avoid spurious watchdog reset.
+	 * If this is not possible because of the min_heartbeat value, reset
+	 * it at the min_heartbeat period.
+	 */
+	if ((max_heartbeat / 4) >= min_heartbeat)
+		wdt->heartbeat = max_heartbeat / 4;
+	else if ((max_heartbeat / 2) >= min_heartbeat)
+		wdt->heartbeat = max_heartbeat / 2;
+	else
+		wdt->heartbeat = min_heartbeat;
+
+	if (max_heartbeat < min_heartbeat + 4)
+		dev_warn(dev,
+			 "min heartbeat and max heartbeat might be too close for the system to handle it correctly\n");
+
+	setup_timer(&wdt->timer, at91_isis_ping, (unsigned long)wdt);
+
+	/*
+	 * Use min_heartbeat the first time to avoid spurious watchdog reset:
+	 * we don't know for how long the watchdog counter is running, and
+	 *  - resetting it right now might trigger a watchdog fault reset
+	 *  - waiting for heartbeat time might lead to a watchdog timeout
+	 *    reset
+	 */
+	mod_timer(&wdt->timer, jiffies + min_heartbeat);
+
+	/* Try to set timeout from device tree first */
+	if (watchdog_init_timeout(&wdt->wdd, 0, dev))
+	{
+		watchdog_init_timeout(&wdt->wdd, heartbeat, dev);
+	}
+
+	watchdog_set_nowayout(&wdt->wdd, wdt->nowayout);
+
+	err = watchdog_register_device(&wdt->wdd);
+
+	if (err)
+	{
+		goto out_stop_timer;
+	}
+
+	wdt->next_heartbeat = jiffies + wdt->wdd.timeout * HZ;
+
+	return 0;
+
+out_stop_timer:
+	del_timer(&wdt->timer);
+	return err;
+}
+
+/* ......................................................................... */
+
+static const struct watchdog_info at91_isis_wdt_info = {
+	.identity	= DRV_NAME,
+	.options	= WDIOF_SETTIMEOUT | WDIOF_KEEPALIVEPING |
+						WDIOF_MAGICCLOSE,
+};
+
+static const struct watchdog_ops at91_isis_wdt_ops = {
+	.owner =	THIS_MODULE,
+	.start =	at91_isis_wdt_start,
+	.stop =		at91_isis_wdt_stop,
+	.set_timeout =	at91_isis_wdt_set_timeout,
+};
+
+#if defined(CONFIG_OF)
+static int of_at91isiswdt_init(struct device_node *np, struct at91isiswdt *wdt)
+{
+	u32 min = 0;
+	u32 max = WDT_COUNTER_MAX_TICKS;
+	const char *tmp;
+
+	/* Maximum interval, in ticks, that the watchdog should be kicked */
+	if (!of_property_read_u32_index(np, "kubos,max-heartbeat", 0,
+					&max))
+	{
+		if (!max || max > WDT_COUNTER_MAX_TICKS)
+		{
+			max = WDT_COUNTER_MAX_TICKS;
+		}
+
+		/* Minimum interval, in ticks, that the watchdog should be kicked */
+		if (!of_property_read_u32_index(np, "kubos,min-heartbeat",
+						0, &min))
+		{
+			if (min >= max)
+			{	min = max - 1;
+
+			}
+			else if ( min < WDT_COUNTER_MIN_TICKS)
+			{
+				min = WDT_COUNTER_MIN_TICKS;
+			}
+
+		}
+	}
+
+	wdt->mr_mask = 0x3FFFFFFF;
+	wdt->mr = 0;
+	if (!of_property_read_string(np, "kubos,watchdog-type", &tmp) &&
+	    !strcmp(tmp, "software"))
+	{
+		wdt->mr |= AT91_WDT_WDFIEN;
+		wdt->mr_mask &= ~AT91_WDT_WDRPROC;
+	}
+	else
+	{
+		wdt->mr |= AT91_WDT_WDRSTEN;
+	}
+
+	if (!of_property_read_string(np, "kubos,reset-type", &tmp) &&
+	    !strcmp(tmp, "proc"))
+	{
+		wdt->mr |= AT91_WDT_WDRPROC;
+	}
+
+	wdt->mr |= max | ((max - min) << 16);
+
+	return 0;
+}
+#else
+static inline int of_at91isiswdt_init(struct device_node *np, struct at91isiswdt *wdt)
+{
+	return 0;
+}
+#endif
+
+static int __init at91isiswdt_probe(struct platform_device *pdev)
+{
+	struct resource	*r;
+	int err;
+	struct at91isiswdt *wdt;
+
+	wdt = devm_kzalloc(&pdev->dev, sizeof(*wdt), GFP_KERNEL);
+	if (!wdt)
+	{
+		return -ENOMEM;
+	}
+
+	wdt->mr = (WDT_HW_TIMEOUT * 256) | AT91_WDT_WDRSTEN | AT91_WDT_WDD |
+		  AT91_WDT_WDDBGHLT | AT91_WDT_WDIDLEHLT;
+	wdt->mr_mask = 0x3FFFFFFF;
+	wdt->nowayout = nowayout;
+	wdt->wdd.parent = &pdev->dev;
+	wdt->wdd.info = &at91_isis_wdt_info;
+	wdt->wdd.ops = &at91_isis_wdt_ops;
+	wdt->wdd.timeout = WDT_HEARTBEAT;
+	wdt->wdd.min_timeout = 1;
+	wdt->wdd.max_timeout = 0xFFFF;
+
+	r = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	wdt->base = devm_ioremap_resource(&pdev->dev, r);
+	if (IS_ERR(wdt->base))
+	{
+		return PTR_ERR(wdt->base);
+	}
+
+	wdt->sclk = devm_clk_get(&pdev->dev, NULL);
+	if (IS_ERR(wdt->sclk))
+	{
+		return PTR_ERR(wdt->sclk);
+	}
+
+	err = clk_prepare_enable(wdt->sclk);
+	if (err)
+	{
+		dev_err(&pdev->dev, "Could not enable slow clock\n");
+		return err;
+	}
+
+	if (pdev->dev.of_node)
+	{
+		err = of_at91isiswdt_init(pdev->dev.of_node, wdt);
+		if (err)
+		{
+			goto err_clk;
+		}
+	}
+
+	err = at91_isis_wdt_init(pdev, wdt);
+	if (err)
+	{
+		goto err_clk;
+	}
+
+	platform_set_drvdata(pdev, wdt);
+
+	return 0;
+
+err_clk:
+	clk_disable_unprepare(wdt->sclk);
+
+	return err;
+}
+
+static int __exit at91isiswdt_remove(struct platform_device *pdev)
+{
+	struct at91isiswdt *wdt = platform_get_drvdata(pdev);
+	watchdog_unregister_device(&wdt->wdd);
+
+	pr_warn("I quit now, hardware will probably reboot!\n");
+	del_timer(&wdt->timer);
+	clk_disable_unprepare(wdt->sclk);
+
+	return 0;
+}
+
+#if defined(CONFIG_OF)
+static const struct of_device_id at91_isis_wdt_dt_ids[] = {
+	{ .compatible = "kubos,at91isis-wdt" },
+	{ /* sentinel */ }
+};
+
+MODULE_DEVICE_TABLE(of, at91_isis_wdt_dt_ids);
+#endif
+
+static struct platform_driver at91isiswdt_driver = {
+	.remove		= __exit_p(at91isiswdt_remove),
+	.driver		= {
+		.name	= "at91_isis_wdt",
+		.of_match_table = of_match_ptr(at91_isis_wdt_dt_ids),
+	},
+	.probe		= at91isiswdt_probe,
+};
+
+static int __init gpio_wdt_init(void)
+{
+	return platform_driver_register(&at91isiswdt_driver);
+}
+arch_initcall(gpio_wdt_init);
+
+MODULE_AUTHOR("Catherine Freed <catherine@kubos.co>");
+MODULE_DESCRIPTION("Watchdog driver for ISIS AT91SAM9G20-based OBC");
+MODULE_LICENSE("GPL");
diff -uNr -x '*.dts' -x '*.mod*' -x '*.S' -x '*.o*' -x '.config*' -x 'auto*' -x defconfig -x '.*' -x '*.ko*' -x '*/arm/boot/*' -x '*builtin*' -x '*.conf' -x '*generated*' -x '*.s*' -x '*.gz*' -x '*.map*' -x '*vmlinux*' -x '*.lzma' -x Image -x zImage -x '*.a*' -x mconf -x config_data.h linux-4.4.23/drivers/watchdog/Kconfig modified-linux-4.4.23/drivers/watchdog/Kconfig
--- linux-4.4.23/drivers/watchdog/Kconfig	2016-09-30 03:20:43.000000000 -0500
+++ modified-linux-4.4.23/drivers/watchdog/Kconfig	2016-12-02 16:33:37.367156000 -0600
@@ -187,6 +187,14 @@
 	help
 	  Watchdog timer embedded into AT91SAM9X and AT91CAP9 chips. This will
 	  reboot your system when the timeout is reached.
+	  
+config AT91ISIS_WATCHDOG
+	tristate "AT91ISIS watchdog"
+	depends on ARCH_AT91
+	select WATCHDOG_CORE
+	help
+	  Watchdog timer embedded into ISIS iOBC. This will
+	  reboot your system when the timeout is reached.
 
 config SAMA5D4_WATCHDOG
 	tristate "Atmel SAMA5D4 Watchdog Timer"
diff -uNr -x '*.dts' -x '*.mod*' -x '*.S' -x '*.o*' -x '.config*' -x 'auto*' -x defconfig -x '.*' -x '*.ko*' -x '*/arm/boot/*' -x '*builtin*' -x '*.conf' -x '*generated*' -x '*.s*' -x '*.gz*' -x '*.map*' -x '*vmlinux*' -x '*.lzma' -x Image -x zImage -x '*.a*' -x mconf -x config_data.h linux-4.4.23/drivers/watchdog/Makefile modified-linux-4.4.23/drivers/watchdog/Makefile
--- linux-4.4.23/drivers/watchdog/Makefile	2016-09-30 03:20:43.000000000 -0500
+++ modified-linux-4.4.23/drivers/watchdog/Makefile	2016-12-02 16:33:37.367156000 -0600
@@ -32,6 +32,7 @@
 obj-$(CONFIG_ARM_SP805_WATCHDOG) += sp805_wdt.o
 obj-$(CONFIG_AT91RM9200_WATCHDOG) += at91rm9200_wdt.o
 obj-$(CONFIG_AT91SAM9X_WATCHDOG) += at91sam9_wdt.o
+obj-$(CONFIG_AT91ISIS_WATCHDOG) += at91isis_wdt.o
 obj-$(CONFIG_CADENCE_WATCHDOG) += cadence_wdt.o
 obj-$(CONFIG_OMAP_WATCHDOG) += omap_wdt.o
 obj-$(CONFIG_TWL4030_WATCHDOG) += twl4030_wdt.o
